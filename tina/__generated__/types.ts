//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  projects: Projects;
  projectsConnection: ProjectsConnection;
  about: About;
  aboutConnection: AboutConnection;
  hobbies: Hobbies;
  hobbiesConnection: HobbiesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
};


export type QueryAboutArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAboutConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
};


export type QueryHobbiesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHobbiesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HobbiesFilter>;
};

export type DocumentFilter = {
  projects?: InputMaybe<ProjectsFilter>;
  about?: InputMaybe<AboutFilter>;
  hobbies?: InputMaybe<HobbiesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Projects | About | Hobbies | Folder;

export type ProjectsProjectsProject = {
  __typename?: 'ProjectsProjectsProject';
  key?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
  flag?: Maybe<Scalars['String']['output']>;
};

export type ProjectsProjects = ProjectsProjectsProject;

export type Projects = Node & Document & {
  __typename?: 'Projects';
  projects?: Maybe<Array<Maybe<ProjectsProjects>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectsProjectsProjectFilter = {
  key?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  flag?: InputMaybe<StringFilter>;
};

export type ProjectsProjectsFilter = {
  project?: InputMaybe<ProjectsProjectsProjectFilter>;
};

export type ProjectsFilter = {
  projects?: InputMaybe<ProjectsProjectsFilter>;
};

export type ProjectsConnectionEdges = {
  __typename?: 'ProjectsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Projects>;
};

export type ProjectsConnection = Connection & {
  __typename?: 'ProjectsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProjectsConnectionEdges>>>;
};

export type AboutLinksLink = {
  __typename?: 'AboutLinksLink';
  name?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type AboutLinks = AboutLinksLink;

export type About = Node & Document & {
  __typename?: 'About';
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
  links?: Maybe<Array<Maybe<AboutLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AboutLinksLinkFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type AboutLinksFilter = {
  link?: InputMaybe<AboutLinksLinkFilter>;
};

export type AboutFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  links?: InputMaybe<AboutLinksFilter>;
};

export type AboutConnectionEdges = {
  __typename?: 'AboutConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<About>;
};

export type AboutConnection = Connection & {
  __typename?: 'AboutConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AboutConnectionEdges>>>;
};

export type HobbiesHobbiesHobby = {
  __typename?: 'HobbiesHobbiesHobby';
  name?: Maybe<Scalars['String']['output']>;
};

export type HobbiesHobbies = HobbiesHobbiesHobby;

export type Hobbies = Node & Document & {
  __typename?: 'Hobbies';
  hobbies?: Maybe<Array<Maybe<HobbiesHobbies>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HobbiesHobbiesHobbyFilter = {
  name?: InputMaybe<StringFilter>;
};

export type HobbiesHobbiesFilter = {
  hobby?: InputMaybe<HobbiesHobbiesHobbyFilter>;
};

export type HobbiesFilter = {
  hobbies?: InputMaybe<HobbiesHobbiesFilter>;
};

export type HobbiesConnectionEdges = {
  __typename?: 'HobbiesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Hobbies>;
};

export type HobbiesConnection = Connection & {
  __typename?: 'HobbiesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HobbiesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateProjects: Projects;
  createProjects: Projects;
  updateAbout: About;
  createAbout: About;
  updateHobbies: Hobbies;
  createHobbies: Hobbies;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationCreateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationUpdateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};


export type MutationCreateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};


export type MutationUpdateHobbiesArgs = {
  relativePath: Scalars['String']['input'];
  params: HobbiesMutation;
};


export type MutationCreateHobbiesArgs = {
  relativePath: Scalars['String']['input'];
  params: HobbiesMutation;
};

export type DocumentUpdateMutation = {
  projects?: InputMaybe<ProjectsMutation>;
  about?: InputMaybe<AboutMutation>;
  hobbies?: InputMaybe<HobbiesMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  projects?: InputMaybe<ProjectsMutation>;
  about?: InputMaybe<AboutMutation>;
  hobbies?: InputMaybe<HobbiesMutation>;
};

export type ProjectsProjectsProjectMutation = {
  key?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  flag?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsProjectsMutation = {
  project?: InputMaybe<ProjectsProjectsProjectMutation>;
};

export type ProjectsMutation = {
  projects?: InputMaybe<Array<InputMaybe<ProjectsProjectsMutation>>>;
};

export type AboutLinksLinkMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type AboutLinksMutation = {
  link?: InputMaybe<AboutLinksLinkMutation>;
};

export type AboutMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  links?: InputMaybe<Array<InputMaybe<AboutLinksMutation>>>;
};

export type HobbiesHobbiesHobbyMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
};

export type HobbiesHobbiesMutation = {
  hobby?: InputMaybe<HobbiesHobbiesHobbyMutation>;
};

export type HobbiesMutation = {
  hobbies?: InputMaybe<Array<InputMaybe<HobbiesHobbiesMutation>>>;
};

export type ProjectsPartsFragment = { __typename: 'Projects', projects?: Array<{ __typename: 'ProjectsProjectsProject', key?: string | null, title?: string | null, url?: string | null, description?: any | null, flag?: string | null } | null> | null };

export type AboutPartsFragment = { __typename: 'About', name?: string | null, description?: any | null, links?: Array<{ __typename: 'AboutLinksLink', name?: string | null, url?: string | null } | null> | null };

export type HobbiesPartsFragment = { __typename: 'Hobbies', hobbies?: Array<{ __typename: 'HobbiesHobbiesHobby', name?: string | null } | null> | null };

export type ProjectsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProjectsQuery = { __typename?: 'Query', projects: { __typename: 'Projects', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, projects?: Array<{ __typename: 'ProjectsProjectsProject', key?: string | null, title?: string | null, url?: string | null, description?: any | null, flag?: string | null } | null> | null } };

export type ProjectsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
}>;


export type ProjectsConnectionQuery = { __typename?: 'Query', projectsConnection: { __typename?: 'ProjectsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProjectsConnectionEdges', cursor: string, node?: { __typename: 'Projects', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, projects?: Array<{ __typename: 'ProjectsProjectsProject', key?: string | null, title?: string | null, url?: string | null, description?: any | null, flag?: string | null } | null> | null } | null } | null> | null } };

export type AboutQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AboutQuery = { __typename?: 'Query', about: { __typename: 'About', id: string, name?: string | null, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, links?: Array<{ __typename: 'AboutLinksLink', name?: string | null, url?: string | null } | null> | null } };

export type AboutConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
}>;


export type AboutConnectionQuery = { __typename?: 'Query', aboutConnection: { __typename?: 'AboutConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AboutConnectionEdges', cursor: string, node?: { __typename: 'About', id: string, name?: string | null, description?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, links?: Array<{ __typename: 'AboutLinksLink', name?: string | null, url?: string | null } | null> | null } | null } | null> | null } };

export type HobbiesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HobbiesQuery = { __typename?: 'Query', hobbies: { __typename: 'Hobbies', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hobbies?: Array<{ __typename: 'HobbiesHobbiesHobby', name?: string | null } | null> | null } };

export type HobbiesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HobbiesFilter>;
}>;


export type HobbiesConnectionQuery = { __typename?: 'Query', hobbiesConnection: { __typename?: 'HobbiesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HobbiesConnectionEdges', cursor: string, node?: { __typename: 'Hobbies', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hobbies?: Array<{ __typename: 'HobbiesHobbiesHobby', name?: string | null } | null> | null } | null } | null> | null } };

export const ProjectsPartsFragmentDoc = gql`
    fragment ProjectsParts on Projects {
  __typename
  projects {
    __typename
    ... on ProjectsProjectsProject {
      key
      title
      url
      description
      flag
    }
  }
}
    `;
export const AboutPartsFragmentDoc = gql`
    fragment AboutParts on About {
  __typename
  name
  description
  links {
    __typename
    ... on AboutLinksLink {
      name
      url
    }
  }
}
    `;
export const HobbiesPartsFragmentDoc = gql`
    fragment HobbiesParts on Hobbies {
  __typename
  hobbies {
    __typename
    ... on HobbiesHobbiesHobby {
      name
    }
  }
}
    `;
export const ProjectsDocument = gql`
    query projects($relativePath: String!) {
  projects(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProjectsParts
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ProjectsConnectionDocument = gql`
    query projectsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProjectsFilter) {
  projectsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProjectsParts
      }
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const AboutDocument = gql`
    query about($relativePath: String!) {
  about(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AboutParts
  }
}
    ${AboutPartsFragmentDoc}`;
export const AboutConnectionDocument = gql`
    query aboutConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AboutFilter) {
  aboutConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AboutParts
      }
    }
  }
}
    ${AboutPartsFragmentDoc}`;
export const HobbiesDocument = gql`
    query hobbies($relativePath: String!) {
  hobbies(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HobbiesParts
  }
}
    ${HobbiesPartsFragmentDoc}`;
export const HobbiesConnectionDocument = gql`
    query hobbiesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HobbiesFilter) {
  hobbiesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HobbiesParts
      }
    }
  }
}
    ${HobbiesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      projects(variables: ProjectsQueryVariables, options?: C): Promise<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}> {
        return requester<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}, ProjectsQueryVariables>(ProjectsDocument, variables, options);
      },
    projectsConnection(variables?: ProjectsConnectionQueryVariables, options?: C): Promise<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}> {
        return requester<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}, ProjectsConnectionQueryVariables>(ProjectsConnectionDocument, variables, options);
      },
    about(variables: AboutQueryVariables, options?: C): Promise<{data: AboutQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutQueryVariables, query: string}> {
        return requester<{data: AboutQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutQueryVariables, query: string}, AboutQueryVariables>(AboutDocument, variables, options);
      },
    aboutConnection(variables?: AboutConnectionQueryVariables, options?: C): Promise<{data: AboutConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutConnectionQueryVariables, query: string}> {
        return requester<{data: AboutConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutConnectionQueryVariables, query: string}, AboutConnectionQueryVariables>(AboutConnectionDocument, variables, options);
      },
    hobbies(variables: HobbiesQueryVariables, options?: C): Promise<{data: HobbiesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HobbiesQueryVariables, query: string}> {
        return requester<{data: HobbiesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HobbiesQueryVariables, query: string}, HobbiesQueryVariables>(HobbiesDocument, variables, options);
      },
    hobbiesConnection(variables?: HobbiesConnectionQueryVariables, options?: C): Promise<{data: HobbiesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HobbiesConnectionQueryVariables, query: string}> {
        return requester<{data: HobbiesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HobbiesConnectionQueryVariables, query: string}, HobbiesConnectionQueryVariables>(HobbiesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.4/content/fba77e95-cfef-4f83-9336-8fcf61ff8710/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  