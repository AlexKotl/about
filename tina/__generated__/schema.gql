# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  hobbies(relativePath: String): Hobbies!
  hobbiesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HobbiesFilter): HobbiesConnection!
}

input DocumentFilter {
  projects: ProjectsFilter
  about: AboutFilter
  hobbies: HobbiesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Projects | About | Hobbies | Folder

type ProjectsProjectsProject {
  key: String
  title: String
  url: String
  description: JSON
  flag: String
}

union ProjectsProjects = ProjectsProjectsProject

type Projects implements Node & Document {
  projects: [ProjectsProjects]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ProjectsProjectsProjectFilter {
  key: StringFilter
  title: StringFilter
  url: StringFilter
  description: RichTextFilter
  flag: StringFilter
}

input ProjectsProjectsFilter {
  project: ProjectsProjectsProjectFilter
}

input ProjectsFilter {
  projects: ProjectsProjectsFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type AboutLinksLink {
  name: String
  url: String
}

union AboutLinks = AboutLinksLink

type About implements Node & Document {
  name: String
  description: JSON
  links: [AboutLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AboutLinksLinkFilter {
  name: StringFilter
  url: StringFilter
}

input AboutLinksFilter {
  link: AboutLinksLinkFilter
}

input AboutFilter {
  name: StringFilter
  description: RichTextFilter
  links: AboutLinksFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type HobbiesHobbiesHobby {
  name: String
}

union HobbiesHobbies = HobbiesHobbiesHobby

type Hobbies implements Node & Document {
  hobbies: [HobbiesHobbies]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HobbiesHobbiesHobbyFilter {
  name: StringFilter
}

input HobbiesHobbiesFilter {
  hobby: HobbiesHobbiesHobbyFilter
}

input HobbiesFilter {
  hobbies: HobbiesHobbiesFilter
}

type HobbiesConnectionEdges {
  cursor: String!
  node: Hobbies
}

type HobbiesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HobbiesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateHobbies(relativePath: String!, params: HobbiesMutation!): Hobbies!
  createHobbies(relativePath: String!, params: HobbiesMutation!): Hobbies!
}

input DocumentUpdateMutation {
  projects: ProjectsMutation
  about: AboutMutation
  hobbies: HobbiesMutation
  relativePath: String
}

input DocumentMutation {
  projects: ProjectsMutation
  about: AboutMutation
  hobbies: HobbiesMutation
}

input ProjectsProjectsProjectMutation {
  key: String
  title: String
  url: String
  description: JSON
  flag: String
}

input ProjectsProjectsMutation {
  project: ProjectsProjectsProjectMutation
}

input ProjectsMutation {
  projects: [ProjectsProjectsMutation]
}

input AboutLinksLinkMutation {
  name: String
  url: String
}

input AboutLinksMutation {
  link: AboutLinksLinkMutation
}

input AboutMutation {
  name: String
  description: JSON
  links: [AboutLinksMutation]
}

input HobbiesHobbiesHobbyMutation {
  name: String
}

input HobbiesHobbiesMutation {
  hobby: HobbiesHobbiesHobbyMutation
}

input HobbiesMutation {
  hobbies: [HobbiesHobbiesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
